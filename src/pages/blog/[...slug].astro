---
import dayjs from 'dayjs';
//import { type CollectionEntry } from 'astro:content';
import i18next from '@/i18n';
import PageLayout from '@/components/layouts/PageLayout.astro';
import ArticleJsonLd from '@/components/json-ld/article.astro';
import Button from '@/components/button';
import AffixTitle from '@/components/affix-title';
import Toc from '@/components/toc';
import CodeGroupEvent from '@/components/code-group-event';
import slateConfig from '~@/slate.config';
import { getFullTitle } from '@/helpers/utils';
import 'remark-block-containers/css';
import '@/assets/style/blog.css';
import { getGitHubPosts } from '@/lib/api/github-content'
import { type GitHubContent } from '@/lib/types/github-content'
import { json } from 'stream/consumers';

// Replace getStaticPaths with GitLab fetching logic
export const getStaticPaths = (async () => {
  console.log("Starting load !!!");
  const posts = await getGitHubPosts();
  
  // Filter out drafts in production
  return posts
    .filter(post => import.meta.env.DEV || !post.data.draft)
    .map(post => ({
      params: { slug: post.slug },
      props: post,
    }));
});

type Props = GitHubContent;

const post = Astro.props;

const { Content, remarkPluginFrontmatter, headings } = await post.render();
const lastModifiedDate = dayjs(
  remarkPluginFrontmatter.lastModified
    ? remarkPluginFrontmatter.lastModified
    : undefined,
);
const lastModified = lastModifiedDate.isSame(dayjs(), 'year')
  ? lastModifiedDate.format('MMM DD')
  : lastModifiedDate.format('MMM DD, YYYY');
const pubDate = dayjs(post.data.pubDate);
const formattedPubDate = pubDate.isSame(dayjs(), 'year')
  ? pubDate.format('MMM DD')
  : pubDate.format('MMM DD, YYYY');
---

<PageLayout title={post.data.title} description={post.data.description}>
  <ArticleJsonLd
    slot="json-ld"
    title={getFullTitle(post.data.title)}
    description={post.data.description}
    pubDate={new Date(post.data.pubDate)}
    lastModified={lastModifiedDate.toDate()}
  />
  <CodeGroupEvent client:only="react" />
  <AffixTitle title={post.data.title} offsetTop={100} client:idle />

  <div class="mb-16" slot="header">
    <Button id="back">←</Button>
  </div>

  <div class="blog-content">
    <div class="mb-16">
      <h1>{post.data.title}</h1>
      <div class="text-slate10 flex items-center gap-2">
        <span>{formattedPubDate}</span>
        {!!slateConfig.readTime && <span>·</span>}
        {
          slateConfig.readTime && (
            <div>
              {i18next.t('blog.readingTime', {
                minutes: remarkPluginFrontmatter.minutesRead,
              })}
            </div>
          )
        }
      </div>
    </div>
    <Content />
    {
      slateConfig.lastModified && (
        <div class="text-slate8">
          {i18next.t('blog.lastModified')} {lastModified}
        </div>
      )
    }
  </div>  
  <Toc
    className="fixed top-0 right-0 bottom-0 hidden w-64 xl:block"
    listClassName="px-5 pt-44 pb-14 "
    dataSource={headings}
    client:visible
  />  
</PageLayout>

<script src="//unpkg.com/heti/umd/heti-addon.min.js" is:inline></script>
<script>
  const backBtn = document.getElementById('back');
  backBtn?.addEventListener('click', () => {
    window.location.href = '/';
  });

  const heti = new Heti('.blog-content');
  heti.autoSpacing();
</script>
